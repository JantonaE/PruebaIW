/* tslint:disable */
/* eslint-disable */
/**
 * El Rastro
 * Grupo B7 - Ingeniería Web
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Puja,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PujaFromJSON,
    PujaToJSON,
} from '../models/index';

export interface CreatePujaPujaPostRequest {
    puja: Puja;
}

export interface DeletePujaPujaIdDeleteRequest {
    id: string;
}

export interface FindAllPujasPujaGetRequest {
    cantidad?: number;
    pujador?: string;
    producto?: string;
    fechaPuja?: string;
}

export interface FindOnePujaPujaIdGetRequest {
    id: string;
}

export interface UpdatePujaPujaIdPutRequest {
    id: string;
    puja: Puja;
}

/**
 * 
 */
export class PujaApi extends runtime.BaseAPI {

    /**
     * Crea una puja y la devuelve.
     * Create Puja
     */
    async createPujaPujaPostRaw(requestParameters: CreatePujaPujaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Puja>> {
        if (requestParameters.puja === null || requestParameters.puja === undefined) {
            throw new runtime.RequiredError('puja','Required parameter requestParameters.puja was null or undefined when calling createPujaPujaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Puja/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PujaToJSON(requestParameters.puja),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PujaFromJSON(jsonValue));
    }

    /**
     * Crea una puja y la devuelve.
     * Create Puja
     */
    async createPujaPujaPost(requestParameters: CreatePujaPujaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Puja> {
        const response = await this.createPujaPujaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina la puja con id pasada por parámetro.
     * Delete Puja
     */
    async deletePujaPujaIdDeleteRaw(requestParameters: DeletePujaPujaIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePujaPujaIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Puja/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina la puja con id pasada por parámetro.
     * Delete Puja
     */
    async deletePujaPujaIdDelete(requestParameters: DeletePujaPujaIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePujaPujaIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de todas las pujas aplicando filtros opcionales
     * Find All Pujas
     */
    async findAllPujasPujaGetRaw(requestParameters: FindAllPujasPujaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Puja>>> {
        const queryParameters: any = {};

        if (requestParameters.cantidad !== undefined) {
            queryParameters['cantidad'] = requestParameters.cantidad;
        }

        if (requestParameters.pujador !== undefined) {
            queryParameters['pujador'] = requestParameters.pujador;
        }

        if (requestParameters.producto !== undefined) {
            queryParameters['producto'] = requestParameters.producto;
        }

        if (requestParameters.fechaPuja !== undefined) {
            queryParameters['fecha_puja'] = requestParameters.fechaPuja;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Puja/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PujaFromJSON));
    }

    /**
     * Devuelve una lista de todas las pujas aplicando filtros opcionales
     * Find All Pujas
     */
    async findAllPujasPujaGet(requestParameters: FindAllPujasPujaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Puja>> {
        const response = await this.findAllPujasPujaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve la puja con id pasada por parámetro.
     * Find One Puja
     */
    async findOnePujaPujaIdGetRaw(requestParameters: FindOnePujaPujaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Puja>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOnePujaPujaIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Puja/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PujaFromJSON(jsonValue));
    }

    /**
     * Devuelve la puja con id pasada por parámetro.
     * Find One Puja
     */
    async findOnePujaPujaIdGet(requestParameters: FindOnePujaPujaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Puja> {
        const response = await this.findOnePujaPujaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza la puja con id pasada por parámetro y la devuelve.
     * Update Puja
     */
    async updatePujaPujaIdPutRaw(requestParameters: UpdatePujaPujaIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Puja>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePujaPujaIdPut.');
        }

        if (requestParameters.puja === null || requestParameters.puja === undefined) {
            throw new runtime.RequiredError('puja','Required parameter requestParameters.puja was null or undefined when calling updatePujaPujaIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Puja/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PujaToJSON(requestParameters.puja),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PujaFromJSON(jsonValue));
    }

    /**
     * Actualiza la puja con id pasada por parámetro y la devuelve.
     * Update Puja
     */
    async updatePujaPujaIdPut(requestParameters: UpdatePujaPujaIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Puja> {
        const response = await this.updatePujaPujaIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
