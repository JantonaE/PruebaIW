/* tslint:disable */
/* eslint-disable */
/**
 * Jesus Antona
 * Ingeniería Web
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  UsuarioCreate,
  UsuarioInput,
  UsuarioOutput,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UsuarioCreateFromJSON,
    UsuarioCreateToJSON,
    UsuarioInputFromJSON,
    UsuarioInputToJSON,
    UsuarioOutputFromJSON,
    UsuarioOutputToJSON,
} from '../models/index';

export interface CreateUserUsuariosPostRequest {
    usuarioCreate: UsuarioCreate;
}

export interface DeleteUserUsuariosIdDeleteRequest {
    id: string;
}

export interface FindAllUsersUsuariosGetRequest {
    letraNombre?: string;
    letraApellido?: string;
    valoracion?: number;
    esAdmin?: boolean;
}

export interface FindOneUserUsuariosIdGetRequest {
    id: string;
}

export interface FindUserByUsernameUsuariosUsernameUsernameGetRequest {
    username: string;
}

export interface UpdateUserUsuariosIdPutRequest {
    id: string;
    usuarioInput: UsuarioInput;
}

/**
 * 
 */
export class UsuariosApi extends runtime.BaseAPI {

    /**
     * Crea un Usuario y lo devuelve
     * Create User
     */
    async createUserUsuariosPostRaw(requestParameters: CreateUserUsuariosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsuarioOutput>> {
        if (requestParameters.usuarioCreate === null || requestParameters.usuarioCreate === undefined) {
            throw new runtime.RequiredError('usuarioCreate','Required parameter requestParameters.usuarioCreate was null or undefined when calling createUserUsuariosPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Usuarios/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsuarioCreateToJSON(requestParameters.usuarioCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsuarioOutputFromJSON(jsonValue));
    }

    /**
     * Crea un Usuario y lo devuelve
     * Create User
     */
    async createUserUsuariosPost(requestParameters: CreateUserUsuariosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsuarioOutput> {
        const response = await this.createUserUsuariosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina el usuario con id pasado por parámetro
     * Delete User
     */
    async deleteUserUsuariosIdDeleteRaw(requestParameters: DeleteUserUsuariosIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserUsuariosIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Usuarios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el usuario con id pasado por parámetro
     * Delete User
     */
    async deleteUserUsuariosIdDelete(requestParameters: DeleteUserUsuariosIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserUsuariosIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de usuarios filtrados
     * Find All Users
     */
    async findAllUsersUsuariosGetRaw(requestParameters: FindAllUsersUsuariosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsuarioOutput>>> {
        const queryParameters: any = {};

        if (requestParameters.letraNombre !== undefined) {
            queryParameters['letraNombre'] = requestParameters.letraNombre;
        }

        if (requestParameters.letraApellido !== undefined) {
            queryParameters['letraApellido'] = requestParameters.letraApellido;
        }

        if (requestParameters.valoracion !== undefined) {
            queryParameters['valoracion'] = requestParameters.valoracion;
        }

        if (requestParameters.esAdmin !== undefined) {
            queryParameters['esAdmin'] = requestParameters.esAdmin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Usuarios/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsuarioOutputFromJSON));
    }

    /**
     * Devuelve una lista de usuarios filtrados
     * Find All Users
     */
    async findAllUsersUsuariosGet(requestParameters: FindAllUsersUsuariosGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsuarioOutput>> {
        const response = await this.findAllUsersUsuariosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el usuario con id pasado por parámetro
     * Find One User
     */
    async findOneUserUsuariosIdGetRaw(requestParameters: FindOneUserUsuariosIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsuarioOutput>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneUserUsuariosIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Usuarios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsuarioOutputFromJSON(jsonValue));
    }

    /**
     * Devuelve el usuario con id pasado por parámetro
     * Find One User
     */
    async findOneUserUsuariosIdGet(requestParameters: FindOneUserUsuariosIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsuarioOutput> {
        const response = await this.findOneUserUsuariosIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el usuario con username pasado por parámetro
     * Find User By Username
     */
    async findUserByUsernameUsuariosUsernameUsernameGetRaw(requestParameters: FindUserByUsernameUsuariosUsernameUsernameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsuarioOutput>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling findUserByUsernameUsuariosUsernameUsernameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Usuarios/Username/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsuarioOutputFromJSON(jsonValue));
    }

    /**
     * Devuelve el usuario con username pasado por parámetro
     * Find User By Username
     */
    async findUserByUsernameUsuariosUsernameUsernameGet(requestParameters: FindUserByUsernameUsuariosUsernameUsernameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsuarioOutput> {
        const response = await this.findUserByUsernameUsuariosUsernameUsernameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza el usuario con id pasado por parámetro y lo devuelve
     * Update User
     */
    async updateUserUsuariosIdPutRaw(requestParameters: UpdateUserUsuariosIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsuarioOutput>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserUsuariosIdPut.');
        }

        if (requestParameters.usuarioInput === null || requestParameters.usuarioInput === undefined) {
            throw new runtime.RequiredError('usuarioInput','Required parameter requestParameters.usuarioInput was null or undefined when calling updateUserUsuariosIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Usuarios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UsuarioInputToJSON(requestParameters.usuarioInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsuarioOutputFromJSON(jsonValue));
    }

    /**
     * Actualiza el usuario con id pasado por parámetro y lo devuelve
     * Update User
     */
    async updateUserUsuariosIdPut(requestParameters: UpdateUserUsuariosIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsuarioOutput> {
        const response = await this.updateUserUsuariosIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
