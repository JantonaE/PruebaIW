/* tslint:disable */
/* eslint-disable */
/**
 * Jesus Antona
 * Ingeniería Web
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ProductoInput,
  ProductoOutput,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ProductoInputFromJSON,
    ProductoInputToJSON,
    ProductoOutputFromJSON,
    ProductoOutputToJSON,
} from '../models/index';

export interface CreateProductoProductosPostRequest {
    productoInput: ProductoInput;
}

export interface DeleteProductProductosIdDeleteRequest {
    id: string;
}

export interface FindAllProductsProductosGetRequest {
    search?: string;
    distanciaMin?: number;
    distanciaMax?: number;
    userlat?: number;
    userlong?: number;
    edad?: number;
    precioMin?: number;
    precioMax?: number;
    fechaPubMin?: string;
    fechaPubMax?: string;
    fechaCierreMin?: string;
    fechaCierreMax?: string;
    vendedor?: string;
    sortedBy?: string;
    desc?: boolean;
}

export interface FindOneProductProductosIdGetRequest {
    id: string;
}

export interface UpdateProductProductosIdPutRequest {
    id: string;
    productoInput: ProductoInput;
}

/**
 * 
 */
export class ProductosApi extends runtime.BaseAPI {

    /**
     * Crea un producto y lo devuelve
     * Create Producto
     */
    async createProductoProductosPostRaw(requestParameters: CreateProductoProductosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductoOutput>> {
        if (requestParameters.productoInput === null || requestParameters.productoInput === undefined) {
            throw new runtime.RequiredError('productoInput','Required parameter requestParameters.productoInput was null or undefined when calling createProductoProductosPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Productos/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductoInputToJSON(requestParameters.productoInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductoOutputFromJSON(jsonValue));
    }

    /**
     * Crea un producto y lo devuelve
     * Create Producto
     */
    async createProductoProductosPost(requestParameters: CreateProductoProductosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductoOutput> {
        const response = await this.createProductoProductosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina el producto con id pasado por parámetro
     * Delete Product
     */
    async deleteProductProductosIdDeleteRaw(requestParameters: DeleteProductProductosIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProductProductosIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Productos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el producto con id pasado por parámetro
     * Delete Product
     */
    async deleteProductProductosIdDelete(requestParameters: DeleteProductProductosIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductProductosIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de productos filtrados
     * Find All Products
     */
    async findAllProductsProductosGetRaw(requestParameters: FindAllProductsProductosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductoOutput>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.distanciaMin !== undefined) {
            queryParameters['distanciaMin'] = requestParameters.distanciaMin;
        }

        if (requestParameters.distanciaMax !== undefined) {
            queryParameters['distanciaMax'] = requestParameters.distanciaMax;
        }

        if (requestParameters.userlat !== undefined) {
            queryParameters['userlat'] = requestParameters.userlat;
        }

        if (requestParameters.userlong !== undefined) {
            queryParameters['userlong'] = requestParameters.userlong;
        }

        if (requestParameters.edad !== undefined) {
            queryParameters['edad'] = requestParameters.edad;
        }

        if (requestParameters.precioMin !== undefined) {
            queryParameters['precioMin'] = requestParameters.precioMin;
        }

        if (requestParameters.precioMax !== undefined) {
            queryParameters['precioMax'] = requestParameters.precioMax;
        }

        if (requestParameters.fechaPubMin !== undefined) {
            queryParameters['fechaPubMin'] = requestParameters.fechaPubMin;
        }

        if (requestParameters.fechaPubMax !== undefined) {
            queryParameters['fechaPubMax'] = requestParameters.fechaPubMax;
        }

        if (requestParameters.fechaCierreMin !== undefined) {
            queryParameters['fechaCierreMin'] = requestParameters.fechaCierreMin;
        }

        if (requestParameters.fechaCierreMax !== undefined) {
            queryParameters['fechaCierreMax'] = requestParameters.fechaCierreMax;
        }

        if (requestParameters.vendedor !== undefined) {
            queryParameters['vendedor'] = requestParameters.vendedor;
        }

        if (requestParameters.sortedBy !== undefined) {
            queryParameters['sortedBy'] = requestParameters.sortedBy;
        }

        if (requestParameters.desc !== undefined) {
            queryParameters['desc'] = requestParameters.desc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Productos/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductoOutputFromJSON));
    }

    /**
     * Devuelve una lista de productos filtrados
     * Find All Products
     */
    async findAllProductsProductosGet(requestParameters: FindAllProductsProductosGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductoOutput>> {
        const response = await this.findAllProductsProductosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el producto con id pasado por parámetro
     * Find One Product
     */
    async findOneProductProductosIdGetRaw(requestParameters: FindOneProductProductosIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductoOutput>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneProductProductosIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Productos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductoOutputFromJSON(jsonValue));
    }

    /**
     * Devuelve el producto con id pasado por parámetro
     * Find One Product
     */
    async findOneProductProductosIdGet(requestParameters: FindOneProductProductosIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductoOutput> {
        const response = await this.findOneProductProductosIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza el producto con id pasado por parámetro y lo devuelve
     * Update Product
     */
    async updateProductProductosIdPutRaw(requestParameters: UpdateProductProductosIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductoOutput>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProductProductosIdPut.');
        }

        if (requestParameters.productoInput === null || requestParameters.productoInput === undefined) {
            throw new runtime.RequiredError('productoInput','Required parameter requestParameters.productoInput was null or undefined when calling updateProductProductosIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Productos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductoInputToJSON(requestParameters.productoInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductoOutputFromJSON(jsonValue));
    }

    /**
     * Actualiza el producto con id pasado por parámetro y lo devuelve
     * Update Product
     */
    async updateProductProductosIdPut(requestParameters: UpdateProductProductosIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductoOutput> {
        const response = await this.updateProductProductosIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
