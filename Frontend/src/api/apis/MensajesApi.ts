/* tslint:disable */
/* eslint-disable */
/**
 * El Rastro
 * Grupo B7 - Ingeniería Web
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Mensaje,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MensajeFromJSON,
    MensajeToJSON,
} from '../models/index';

export interface CreateMensajeMensajesPostRequest {
    mensaje: Mensaje;
}

export interface DeleteMensajeMensajesIdDeleteRequest {
    id: string;
}

export interface FindAllMensajesMensajesGetRequest {
    emisor?: string;
    receptor?: string;
    producto?: string;
}

export interface FindOneMensajeMensajesIdGetRequest {
    id: string;
}

export interface UpdateMensajeMensajesIdPutRequest {
    id: string;
    mensaje: Mensaje;
}

/**
 * 
 */
export class MensajesApi extends runtime.BaseAPI {

    /**
     * Crea un mensaje y lo devuelve
     * Create Mensaje
     */
    async createMensajeMensajesPostRaw(requestParameters: CreateMensajeMensajesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mensaje>> {
        if (requestParameters.mensaje === null || requestParameters.mensaje === undefined) {
            throw new runtime.RequiredError('mensaje','Required parameter requestParameters.mensaje was null or undefined when calling createMensajeMensajesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Mensajes/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MensajeToJSON(requestParameters.mensaje),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MensajeFromJSON(jsonValue));
    }

    /**
     * Crea un mensaje y lo devuelve
     * Create Mensaje
     */
    async createMensajeMensajesPost(requestParameters: CreateMensajeMensajesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mensaje> {
        const response = await this.createMensajeMensajesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina el mensaje con id pasado por parámetro
     * Delete Mensaje
     */
    async deleteMensajeMensajesIdDeleteRaw(requestParameters: DeleteMensajeMensajesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMensajeMensajesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Mensajes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el mensaje con id pasado por parámetro
     * Delete Mensaje
     */
    async deleteMensajeMensajesIdDelete(requestParameters: DeleteMensajeMensajesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMensajeMensajesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de todas los mensajes aplicando filtros opcionales
     * Find All Mensajes
     */
    async findAllMensajesMensajesGetRaw(requestParameters: FindAllMensajesMensajesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Mensaje>>> {
        const queryParameters: any = {};

        if (requestParameters.emisor !== undefined) {
            queryParameters['emisor'] = requestParameters.emisor;
        }

        if (requestParameters.receptor !== undefined) {
            queryParameters['receptor'] = requestParameters.receptor;
        }

        if (requestParameters.producto !== undefined) {
            queryParameters['producto'] = requestParameters.producto;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Mensajes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MensajeFromJSON));
    }

    /**
     * Devuelve una lista de todas los mensajes aplicando filtros opcionales
     * Find All Mensajes
     */
    async findAllMensajesMensajesGet(requestParameters: FindAllMensajesMensajesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Mensaje>> {
        const response = await this.findAllMensajesMensajesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el mensaje con id pasado por parámetro
     * Find One Mensaje
     */
    async findOneMensajeMensajesIdGetRaw(requestParameters: FindOneMensajeMensajesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mensaje>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneMensajeMensajesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Mensajes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MensajeFromJSON(jsonValue));
    }

    /**
     * Devuelve el mensaje con id pasado por parámetro
     * Find One Mensaje
     */
    async findOneMensajeMensajesIdGet(requestParameters: FindOneMensajeMensajesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mensaje> {
        const response = await this.findOneMensajeMensajesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza el mensaje con id pasado por parámetro y lo devuelve
     * Update Mensaje
     */
    async updateMensajeMensajesIdPutRaw(requestParameters: UpdateMensajeMensajesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mensaje>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMensajeMensajesIdPut.');
        }

        if (requestParameters.mensaje === null || requestParameters.mensaje === undefined) {
            throw new runtime.RequiredError('mensaje','Required parameter requestParameters.mensaje was null or undefined when calling updateMensajeMensajesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Mensajes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MensajeToJSON(requestParameters.mensaje),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MensajeFromJSON(jsonValue));
    }

    /**
     * Actualiza el mensaje con id pasado por parámetro y lo devuelve
     * Update Mensaje
     */
    async updateMensajeMensajesIdPut(requestParameters: UpdateMensajeMensajesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mensaje> {
        const response = await this.updateMensajeMensajesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
